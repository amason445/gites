#!/bin/bash

# File size limit in bytes (adjust this as per your requirement)
FILE_SIZE_LIMIT=$((100 * 1024 * 1024))  # 100 MB limit (100,000,000 bytes)

# Array to store the files that exceed the size limit
exceeded_files=()

# Function to check the size of a file
function check_file_size() {
  local file="$1"
  local size
  size=$(stat -c %s "$file") # Get file size in bytes
  if ((size > FILE_SIZE_LIMIT)); then
    exceeded_files+=("$file")
  fi
}

# Loop through the staged files
while IFS= read -r -d '' file; do
  # Check if the file is added, modified, or copied (not deleted)
  status=$(git status --porcelain -- "$file" | cut -c1-2)
  if [ "$status" != "D " ]; then
    check_file_size "$file"
  fi
done < <(git diff --cached --name-only -z)

# If there are files that exceed the limit, print the list, unstage the files, and exit
if [ "${#exceeded_files[@]}" -gt 0 ]; then
  echo "Pre-commit hook: Some files exceed the size limit of 100 MB:"
  for file in "${exceeded_files[@]}"; do
    size=$(stat -c %s "$file")
    echo "$(realpath --relative-to=. "$file") - $((size / 1024 / 1024)) MB"
  done
  git reset HEAD -- "${exceeded_files[@]}" # Unstage the files that exceed the limit
  echo "applied: git reset HEAD -- '${exceeded_files[@]}' to unstage the large files. Small files are in the staged area (indexed)"
  echo "please manually resolve these large files and try again."
  echo "========================"
  exit 1
fi

# Allow the commit to proceed
exit 0
